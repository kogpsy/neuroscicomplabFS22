error <- rnorm(1, 0, sqrt(diffvar * dt))
dv[j] <- dv[j-1] + driftrate * dt + error  # Cobb & Zacks (1985), Eq. 1.14
if (abs(dv[j]) > decision_boundary) {
dv[j] <- dplyr::if_else(dv[j] > 0,
min(dv[j], decision_boundary),
max(dv[j], -decision_boundary))
break()
}
d <- dplyr::tibble(time = round(seq_along(dv) * dt, 3),
dv = dv,
steps = seq_along(dv),
driftrate = driftrate,
decision_boundary = decision_boundary,
bias = bias,
ndt = ndt)
return(d)
}
slow <- drift_diffusion(driftrate = 0.8) %>% mutate(type = "slow")
slow
fast <- drift_diffusion(driftrate = 1.2) %>% mutate(type = "fast")
View(fast)
fastslow <- bind_rows(fast, slow)
fastslow %>%
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1) +
ggtitle("Grosse vs. kleine Drift Rate")
fastslow %>%
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(0, 2), color = "black", size = 1) +
ggtitle("Grosse vs. kleine Drift Rate")
fastslow %>%
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1) +
ggtitle("Grosse vs. kleine Drift Rate")
#| warning: false
set.seed(829)
slow <- drift_diffusion(driftrate = 0.8) %>% mutate(type = "slow")
fast <- drift_diffusion(driftrate = 1.2) %>% mutate(type = "fast")
fastslow <- bind_rows(fast, slow)
fastslow %>%
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1) +
ggtitle("Grosse vs. kleine Drift Rate")
rts <- rdiffusion(500, a = 1, v = 2, t0 = 0.5, z = 0.2)
glimpse(rts)
rts %>%
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3)
rts %>%
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_point()
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_point() +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.05) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.01) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.1) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.004) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.1) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter() +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
?geom_jitter
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin(width = 0.8) +
geom_jitter() +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin(width = 0.01) +
geom_jitter() +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.01) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.25) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.05) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
# library(kableExtra)
tribble(~Parameter, ~Bedeutung, ~Anwendung,
"drift rate", "Qualität der Evidenz pro Zeiteinheit", "Task Schwierigkeit, Fähigkeit",
"bias", "Anfangspunkt der Evidenzakkumulierung", "A priori Präferenz für eine der beiden Alternativen",
"boundary separation", "Vorsicht (caution)", "Speed-Accuracy Trade-off",
"non'decision time", "Verzögerung", "Periphere Prozesse") %>%
kbl()
# library(kableExtra)
tribble(~Parameter, ~Bedeutung, ~Anwendung,
"drift rate", "Qualität der Evidenz pro Zeiteinheit", "Task Schwierigkeit, Fähigkeit",
"bias", "Anfangspunkt der Evidenzakkumulierung", "A priori Präferenz für eine der beiden Alternativen",
"boundary separation", "Vorsicht (caution)", "Speed-Accuracy Trade-off",
"non'decision time", "Verzögerung", "Periphere Prozesse") %>%
kable()
# library(kableExtra)
tribble(~Parameter, ~Bedeutung, ~Anwendung,
"drift rate", "Qualität der Evidenz pro Zeiteinheit", "Task Schwierigkeit, Fähigkeit",
"bias", "Anfangspunkt der Evidenzakkumulierung", "A priori Präferenz für eine der beiden Alternativen",
"boundary separation", "Vorsicht (caution)", "Speed-Accuracy Trade-off",
"non'decision time", "Verzögerung", "Periphere Prozesse") %>%
knitr::kable()
![Figure from @mulderBiasBrainDiffusion2012a](../assets/images/ddm-mulder.png)
![RT Verteilungen](../assets/images/ddm-illustration.png)
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(wwidth = 0.5, height = 0.5, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(wwidth = 0.5, height = 0.1, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(width = 0.5, height = 0.1, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(height = 0.1, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(height = 0.5, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(height = 0.05, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
rts |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(height = 0.1, alpha = 0.5) +
scale_fill_viridis_d(option = "B", direction = -1,
begin = 1/3, end = 3/3) +
xlim(c(0, 2))
driftrate <- 0.5
sd <- 0.1
evidence <- rnorm(n = 1, mean = driftrate, sd = sd)
evidence
set.seed(546)
# hier z.B> standardnormalverteilte Zahlen
zufallszahlen_1 <- c(0, rnorm(99, 0, 1))
random_walk_1 <- cumsum(zufallszahlen_1)
plot(1:100, random_walk_1, type = "s", col = "#7fc97f",
ylim=c(-10,30), lwd = 2,
xlab = "Zeit", ylab="Random Walk")
zufallszahlen_2 <- c(0, rnorm(99, 0.3, 1))
random_walk_2 <- cumsum(zufallszahlen_2)
lines(1:100, random_walk_2, pch = 18, col = "#beaed4",
type = "s", lwd = 2)
plot(1:100, random_walk_1, type = "s", col = "#7fc97f",
ylim=c(-10,30), lwd = 2,
xlab = "Zeit", ylab="Random Walk")
lines(1:100, random_walk_2, pch = 18, col = "#beaed4",
type = "s", lwd = 2)
zufallszahlen_2 <- c(0, rnorm(99, 0.3, 1))
random_walk_2 <- cumsum(zufallszahlen_2)
plot(1:100, random_walk_1, type = "s", col = "#7fc97f",
ylim=c(-10,30), lwd = 2,
xlab = "Zeit", ylab="Random Walk")
lines(1:100, random_walk_2, pch = 18, col = "#beaed4",
type = "s", lwd = 2)
legend("topleft", legend=c("Ohne Trend", "Mit Trend"),
col=c("#7fc97f", "#beaed4"), lty = c(1, 1))
set.seed(546)
# hier z.B> standardnormalverteilte Zahlen
zufallszahlen_1 <- c(0, rnorm(99, 0, 1))
random_walk_1 <- cumsum(zufallszahlen_1)
plot(1:100, random_walk_1, type = "s", col = "#7fc97f",
ylim=c(-10,30), lwd = 2,
xlab = "Zeit", ylab="Random Walk")
zufallszahlen_2 <- c(0, rnorm(99, 0.3, 1))
random_walk_2 <- cumsum(zufallszahlen_2)
plot(1:100, random_walk_1, type = "s", col = "#7fc97f",
ylim=c(-10,30), lwd = 2,
xlab = "Zeit", ylab="Random Walk")
lines(1:100, random_walk_2, pch = 18, col = "#beaed4",
type = "s", lwd = 2)
legend("topleft", legend=c("Ohne Trend", "Mit Trend"),
col=c("#7fc97f", "#beaed4"), lty = c(1, 1))
evidence <- rep(NA, n_steps)
n_steps <- 10
evidence <- rep(NA, n_steps)
evidence
dv <- rep(NA, n_steps)
dv
time_steps <- 1:n_steps
# Wir ziehen den ersten Wert aus der Verteilung
evidence[1] <- rnorm(1, mean = driftrate, sd = sd)
driftrate <- 0.5
sd <- 0.1
n_steps <- 10
evidence <- rep(NA, n_steps)
dv <- rep(NA, n_steps)
time_steps <- 1:n_steps
# Wir ziehen den ersten Wert aus der Verteilung
evidence[1] <- rnorm(1, mean = driftrate, sd = sd)
dv[1] <- evidence[1]
# für jeden weitern Zeitpunkt ziehen wir wieder eine Zufallszahl und addieren zur kumulierten DV
for (t in 2:n_steps) {
evidence[t] <- rnorm(1, mean = driftrate, sd = sd)
dv[t] <- dv[t-1] + evidence[t]
}
tibble(time_steps, evidence, dv) %>%
pivot_longer(c(evidence, dv), names_to = "type", values_to = "value") %>%
ggplot(aes(time_steps, value, linetype = type, color = type)) +
geom_line() +
geom_point(size = 4) +
scale_color_viridis_d(begin = 0.2, end = 0.5)
tribble(~Parameter, ~Bedeutung, ~Anwendung,
"drift rate", "Qualität der Evidenz pro Zeiteinheit", "Task Schwierigkeit, Fähigkeit",
"bias", "Anfangspunkt der Evidenzakkumulierung", "A priori Präferenz für eine der beiden Alternativen",
"boundary separation", "Vorsicht (caution)", "Speed-Accuracy Trade-off",
"non'decision time", "Verzögerung", "Periphere Prozesse") %>%
knitr::kable()
tribble(~Parameter, ~Bedeutung, ~Anwendung,
"drift rate", "Qualität der Evidenz pro Zeiteinheit", "Task Schwierigkeit, Fähigkeit",
"bias", "Anfangspunkt der Evidenzakkumulierung", "A priori Präferenz für eine der beiden Alternativen",
"boundary separation", "Vorsicht (caution)", "Speed-Accuracy Trade-off",
"non-decision time", "Verzögerung", "Periphere Prozesse") %>%
knitr::kable()
slow <- drift_diffusion(driftrate = 0.8) %>% mutate(type = "slow")
fast <- drift_diffusion(driftrate = 1.2) %>% mutate(type = "fast")
fastslow <- bind_rows(fast, slow)
fastslow %>%
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1) +
ggtitle("Grosse vs. kleine Drift Rate")
carefree <- drift_diffusion(decision_boundary = 1.6) |> mutate(type = "carefree")
cautious <- drift_diffusion(decision_boundary = 2.1) |> mutate(type = "cautious")
cautiouscareless <- bind_rows(carefree, cautious)
decision_boundaries <- tribble(~type, ~decision_boundary,
"carefree", 1.6,
"cautious", 2.1)
cautiouscareless |>
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(aes(yintercept = decision_boundary, color = type), data = decision_boundaries) +
geom_hline(aes(yintercept = -decision_boundary, color = type), data = decision_boundaries) +
ggtitle("Unterschiede im Abstand zwischen den Grenzen")
set.seed(4534)
longndt <- drift_diffusion(ndt = 0.7) |> mutate(type = "longndt")
shortndt <- drift_diffusion(ndt = 0.2) |> mutate(type = "shortndt")
ndt <- bind_rows(longndt, shortndt)
ndts <- tribble(~type, ~ndt,
"longndt", 0.7,
"shortndt", 0.2)
ndt |>
ggplot(aes(time, dv, color = type)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_vline(aes(xintercept = ndt, color = type), data = ndts) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1) +
ggtitle("Unterschiede in der Non-Decision Time")
seq_along(letters)
seq_along(c("a", "b", "C"))
min(1, 2)
min(1, -2)
max(3, 4)
# initialize time_steps and dv
time_steps <- max_time/dt
bias <- 0.5
driftrate <- 0.8
decision_boundary <- 2
ndt <- 0.5
diffvar <- 0.1
dt <- 0.001
max_time <- 6
# rescale bias so that 0.5 lies halfway between upper and lower bound
bias <- as.numeric(2 * decision_boundary * bias - decision_boundary)
as.numeric(2)
# initialize time_steps and dv
time_steps <- max_time/dt
dv <- array(dim = time_steps)
dv
array(dim = 1)
array(dim = 2)
# start acumulating from bias (starting point)
dv[1] <- rnorm(1, mean = bias, sd = sqrt(dt))
break()
# start acumulating from bias (starting point)
dv[1] <- rnorm(1, mean = bias, sd = sqrt(dt))
for (j in 2:time_steps) {
# non-decision time
if (j <= ndt/dt) {
dv[j] <- dv[j-1]
}
else {
error <- rnorm(1, 0, sqrt(diffvar * dt))
dv[j] <- dv[j-1] + driftrate * dt + error  # Cobb & Zacks (1985), Eq. 1.14
if (abs(dv[j]) > decision_boundary) {
dv[j] <- dplyr::if_else(dv[j] > 0,
min(dv[j], decision_boundary),
max(dv[j], -decision_boundary))
break()
}
d <- dplyr::tibble(time = round(seq_along(dv) * dt, 3),
dv = dv,
steps = seq_along(dv),
driftrate = driftrate,
decision_boundary = decision_boundary,
bias = bias,
ndt = ndt)
d
# rescale bias so that 0.5 lies halfway between upper and lower bound
bias <- as.numeric(2 * decision_boundary * bias - decision_boundary)
bias
bias <- 0.5
driftrate <- 0.8
decision_boundary <- 2
ndt <- 0.5
diffvar <- 0.1
dt <- 0.001
max_time <- 6
# rescale bias so that 0.5 lies halfway between upper and lower bound
bias <- as.numeric(2 * decision_boundary * bias - decision_boundary)
bias
# initialize time_steps and dv
time_steps <- max_time/dt
dv <- array(dim = time_steps)
time_steps
dv <- array(dim = time_steps)
dv
dt
d <- dplyr::tibble(time = round(seq_along(dv) * dt, 3),
dv = dv,
steps = seq_along(dv),
driftrate = driftrate,
decision_boundary = decision_boundary,
bias = bias,
ndt = ndt)
d |>
ggplot(aes(time, dv)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1)
d
for (j in 2:time_steps) {
# non-decision time
if (j <= ndt/dt) {
# dv bleibt gleich
dv[j] <- dv[j-1]
}
else {
# Akkumulierung fängt an
error <- rnorm(1, 0, sqrt(diffvar * dt))
# dv ist alte dv plus drift plus noise
dv[j] <- dv[j-1] + driftrate * dt + error  # Cobb & Zacks (1985), Eq. 1.14
# decision
if (abs(dv[j]) > decision_boundary) {
dv[j] <- dplyr::if_else(dv[j] > 0,
min(dv[j], decision_boundary),
max(dv[j], -decision_boundary))
break()
}
bias <- 0.5
driftrate <- 0.8
decision_boundary <- 2
ndt <- 0.5
diffvar <- 0.1
dt <- 0.001
max_time <- 6
# rescale bias so that 0.5 lies halfway between upper and lower bound
bias <- as.numeric(2 * decision_boundary * bias - decision_boundary)
# initialize time_steps and dv
time_steps <- max_time/dt
dv <- array(dim = time_steps)
# start acumulating from bias (starting point)
dv[1] <- rnorm(1, mean = bias, sd = sqrt(dt))
for (j in 2:time_steps) {
# non-decision time
if (j <= ndt/dt) {
# dv bleibt gleich
dv[j] <- dv[j-1]
}
else {
# Akkumulierung fängt an
error <- rnorm(1, 0, sqrt(diffvar * dt))
# dv ist alte dv plus drift plus noise
dv[j] <- dv[j-1] + driftrate * dt + error  # Cobb & Zacks (1985), Eq. 1.14
# decision
if (abs(dv[j]) > decision_boundary) {
dv[j] <- dplyr::if_else(dv[j] > 0,
min(dv[j], decision_boundary),
max(dv[j], -decision_boundary))
break()
}
d <- dplyr::tibble(time = round(seq_along(dv) * dt, 3),
dv = dv,
steps = seq_along(dv),
driftrate = driftrate,
decision_boundary = decision_boundary,
bias = bias,
ndt = ndt)
d |>
ggplot(aes(time, dv)) +
geom_hline(yintercept = 0, linetype = 3) +
geom_line() +
scale_color_viridis_d(end = 0.8) +
geom_hline(yintercept = c(-2, 2), color = "black", size = 1)
knitr::purl("pages/chapters/09_evidence_accumulation_1.qmd")
