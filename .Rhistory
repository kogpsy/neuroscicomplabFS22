estimates[j, ] <- fit$par |> round(3)
}
p[[i]] <- estimates
}
p
participants <- levels(d$ID)
n_participants <- length(participants)
conditions <- levels(d$condition)
n_conditions <- length(conditions)
# no. parameters (a, v1, v2, z, t0)
n_pars <- length(init_params())
p <- vector("list", n_participants)
for (i in seq_along(participants)) {
estimates <- array(NA, c(n_conditions, n_pars))
colnames(estimates) <- c("a", "v", "z", "t0")
rownames(estimates) <- c("A", "B")
for (j in seq_along(conditions)) {
data <- filter(d, ID == i, condition == conditions[j])
fit <- nlminb(init_params(),
diffusionloglik,
lower = 0,
condition = data$condition,
rt = data$rt,
response = data$response)
estimates[j, ] <- fit$par |> round(3)
}
p[[i]] <- estimates
}
init_params <- function() {
params <- c(a = runif(1, 0.2, 1.2),
v = rnorm(1, 0.5, 0.5),
z = runif(1, 0.45, 0.55),
t0 = runif(1, 0.01, 0.3))
params
}
participants <- levels(d$ID)
n_participants <- length(participants)
conditions <- levels(d$condition)
n_conditions <- length(conditions)
# no. parameters (a, v1, v2, z, t0)
n_pars <- length(init_params())
p <- vector("list", n_participants)
for (i in seq_along(participants)) {
estimates <- array(NA, c(n_conditions, n_pars))
colnames(estimates) <- c("a", "v", "z", "t0")
rownames(estimates) <- c("A", "B")
for (j in seq_along(conditions)) {
data <- filter(d, ID == i, condition == conditions[j])
fit <- nlminb(init_params(),
diffusionloglik,
lower = 0,
condition = data$condition,
rt = data$rt,
response = data$response)
estimates[j, ] <- fit$par |> round(3)
}
p[[i]] <- estimates
}
p
d
dglimpse
d |> glimpse
d |> glimpse()
d <- d |>
mutate(across(c(ID, condition, response), ~as_factor(.)))
d |> glimpse()
d |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(height = 0.1, alpha = 0.2, size = 0.25) +
scale_fill_viridis_d(option = "B", direction = 1,
begin = 1/2, end = 2/2) +
xlim(c(0, 1.5)) +
facet_grid(condition ~ ID)
summary <- d |> group_by(ID, condition) |>
summarise(mean_rt = mean(rt),
median_rt = median(rt),
mean_upper = mean(response == "upper"))
summary
summary |>
ggplot(aes(mean_rt, mean_upper)) +
geom_point()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID))
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black")
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dot")
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted")
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_binned()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_binned()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_brewer()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_discrete()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_c()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d()
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(bend = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point() +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point(sixe = 4) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point(sixe = 8) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point(sixe = 12) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point(size = 12) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point(size = 6) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_point(size = 4) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
scale_color_viridis_d(end = 0.8)
summary |>
ggplot(aes(mean_rt, mean_upper, color = condition)) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
geom_point(size = 4) +
scale_color_viridis_d(end = 0.8)
cardgame <- c(rep(1, 6), rep(0, 3))
cardgame <- c(rep(1, 6), rep(0, 3)) |>
sample(9, replace = FALSE)
cardgame
write_csv("cardgame.csv")
cardgame |> write_csv("cardgame.csv")
cardgame <- c(rep(1, 6), rep(0, 3)) |>
sample(9, replace = FALSE) |>
tibble()
cardgame
cardgame <- tibble(game = row_number(),
Awins = cardgame)
cardgame <- c(rep(1, 6), rep(0, 3)) |>
sample(9, replace = FALSE)
cardgame <- tibble(game = row_number(),
Awins = cardgame)
cardgame <- tibble(game = 1:9,
Awins = cardgame)
cardgame
cardgame <- c(rep(1, 6), rep(0, 3)) |>
sample(9, replace = FALSE)
cardgame <- tibble(game = 1:9,
A_wins = cardgame)
cardgame |> write_csv("cardgame.csv")
cardgame <- tibble(game = 1:9,
winner = if_else(cardgame == 1, "A", "B"),
indicator = cardgame)
cardgame <- c(rep(1, 6), rep(0, 3)) |>
sample(9, replace = FALSE)
cardgame <- tibble(game = 1:9,
winner = if_else(cardgame == 1, "A", "B"),
indicator = cardgame)
cardgame
cardgame |> write_csv("cardgame.csv")
theta_grid <- seq(0, 1, length = 1e3)
prior = dbeta(theta_grid, shape1 = 1, shape2 = 2)
cardgame
likelihood <- dbinom(wins, size = games , prob = theta_grid)
posterior <- compute_posterior(likelihood = likelihood, prior = prior)
plot(theta_grid, posterior)
theta_grid <- seq(0, 1, length = 1e3)
prior <- dbeta(theta_grid, shape1 = 1, shape2 = 2)
likelihood <- dbinom(wins, size = games , prob = theta_grid)
posterior <- compute_posterior(likelihood = likelihood, prior = prior)
plot(theta_grid, posterior)
posterior$posterior
plot(theta_grid, posterior$posterior)
prior
theta_grid == 0.5
prior[theta_grid == 0.5]
theta_grid
theta_grid <- seq(0, 1, length = 1e2)
prior <- dbeta(theta_grid, shape1 = 1, shape2 = 2)
likelihood <- dbinom(wins, size = games , prob = theta_grid)
posterior <- compute_posterior(likelihood = likelihood, prior = prior)
theta_grid
prior[theta_grid == 0.50505051]
which(theta_grid == 0.50505051)
which()
?which()
which(LETTERS == "R")
which(theta_grid == 0.50505051)
which(theta_grid)
theta_grid
prior[[51]]
prior[51]/posterior[51]
prior[51]/posterior$posterior[51]
prior[51]/posterior$prior[51]
prior[51]/posterior$posterior[51]
plot_posterior(posterior)
theta_grid <- seq(0, 1, length = 1e2)
prior <- dbeta(theta_grid, shape1 = 1, shape2 = 1)
likelihood <- dbinom(wins, size = games , prob = theta_grid)
posterior <- compute_posterior(likelihood = likelihood, prior = prior)
prior[51]/posterior[51]
d <- compute_posterior(likelihood = likelihood, prior = prior)
d$prior[51]/d$posterior[51]
plot_posterior(d)
d$posterior[51]
d$prior[51]
d$posterior
d$posterior |> sum()
compute_posterior
unstandardized_posterior <- likelihood * prior
unstandardized_posterior
plot(theta_grid, unstandardized_posterior)
dbeta(theta_grid, 7, 4)
posterior <- dbeta(theta_grid, 7, 4)
plot(theta_grid, posterior)
theta_grid <- seq(0, 1, length = 1e3)
prior <- dbeta(theta_grid, shape1 = 1, shape2 = 1)
likelihood <- dbinom(wins, size = games , prob = theta_grid)
unstandardized_posterior <- likelihood * prior
plot(unstandardized_posterior)
sum(prior)
prior/sum(prior)
p <- prior/sum(prior)
unstandardized_posterior <- likelihood * p
unstandardized_posterior
unstandardized_posterior <- unstandardized_posterior/sum(unstandardized_posterior)
posterior <- unstandardized_posterior
posterior
plot(posterior)
sum(prior)
p <- prior/sum(prior)
unstandardized_posterior <- likelihood * p
posterior <- unstandardized_posterior/sum(unstandardized_posterior)
plot(posterior)
posterior <- unstandardized_posterior/sum(unstandardized_posterior)
posterior <- dbeta(theta_grid, 7, 4)
posterior
prior[51]/posterior[51]
prior
prior[51]/posterior[51]
posterior[51]
posterior <- dbeta(0.5, 7, 4)
posterior
posterior <- dbeta(0.5, 1, 1)
postcards::create_postcard()
posterior
prior <- dbeta(0.5, 1, 1)
posterior <- dbeta(0.5, 7, 4)
prior
posterior
prior/posterior
theta_grid <- seq(0, 1, length =  1001)
prior <- dbeta(theta_grid, shape1 = 1, shape2 = 1)
likelihood <- dbinom(wins, size = games , prob = theta_grid)
d <- compute_posterior(likelihood = likelihood, prior = prior)
plot_posterior(d)
theta_grid
which(theta_grid == 0.5)
prior[501]/posterior[501]
d$prior[501]/d$posterior[501]
n <- 1001
n_success <- 6
n_trials  <- 9
(
d <-
tibble(p_grid     = seq(from = 0, to = 1, length.out = n),
# note we're still using a flat uniform prior
prior      = 1) %>%
mutate(likelihood = dbinom(n_success, size = n_trials, prob = p_grid)) %>%
mutate(posterior  = (likelihood * prior) / sum(likelihood * prior))
)
plot_posterior()
plot_posterior
d <- read_csv("ddm-data.csv")
```{r}
#| eval: true
#| echo: true
#| warning: false
library(tidyverse)
library(rtdists)
d <- read_csv("ddm-data.csv")
participant_params <- read_csv("participant-params.csv")
d |> glimpse()
d <- d |>
mutate(across(c(ID, condition, response), ~as_factor(.)))
d |> glimpse()
d |>
ggplot(aes(rt, response, fill = response)) +
geom_violin() +
geom_jitter(height = 0.1, alpha = 0.2, size = 0.25) +
scale_fill_viridis_d(option = "B", direction = 1,
begin = 1/2, end = 2/2) +
xlim(c(0, 1.5)) +
facet_grid(condition ~ ID)
summary <- d |> group_by(ID, condition) |>
summarise(mean_rt = mean(rt),
median_rt = median(rt),
accuracy = mean(response == "upper"))
summary
summary |>
ggplot(aes(mean_rt, accuracy, color = condition)) +
geom_line(aes(group = ID), color = "black", linetype = "dotted") +
geom_point(size = 4) +
scale_color_viridis_d(end = 0.8)
diffusionloglik <- function(pars, condition, rt, response) {
conditions <- levels(condition)
likelihoods <- vector("numeric", length(rt))
likelihoods <- ddiffusion(rt = rt,
response = response,
a = pars["a"],
v =  pars["v"],
t0 = pars["t0"],
z = pars["z"] * pars["a"],
s = 1.0)
if (any(likelihoods == 0)) return(1e6)
return(-sum(log(likelihoods)))
}
init_params <- function() {
params <- c(a = runif(1, 0.2, 1.2),
v = rnorm(1, 0.5, 0.5),
z = runif(1, 0.45, 0.55),
t0 = runif(1, 0.01, 0.3))
params
}
participants <- levels(d$ID)
n_participants <- length(participants)
conditions <- levels(d$condition)
n_conditions <- length(conditions)
# no. parameters (a, v1, v2, z, t0)
n_pars <- length(init_params())
p <- vector("list", n_participants)
for (i in seq_along(participants)) {
estimates <- array(NA, c(n_conditions, n_pars))
colnames(estimates) <- c("a", "v", "z", "t0")
rownames(estimates) <- c("A", "B")
for (j in seq_along(conditions)) {
data <- filter(d, ID == i, condition == conditions[j])
fit <- nlminb(init_params(),
diffusionloglik,
lower = 0,
condition = data$condition,
rt = data$rt,
response = data$response)
estimates[j, ] <- fit$par |> round(3)
}
p[[i]] <- estimates
}
diffusionloglik <- function(pars, condition, rt, response) {
conditions <- levels(condition)
likelihoods <- vector("numeric", length(rt))
likelihoods <- ddiffusion(rt = rt,
response = response,
a = pars["a"],
v =  pars["v"],
t0 = pars["t0"],
z = pars["z"] * pars["a"],
s = 1.0)
if (any(likelihoods == 0)) return(1e6)
return(-sum(log(likelihoods)))
}
init_params <- function() {
params <- c(a = runif(1, 0.2, 1.2),
v = rnorm(1, 0.5, 0.5),
z = runif(1, 0.45, 0.55),
t0 = runif(1, 0.01, 0.3))
params
}
participants <- levels(d$ID)
n_participants <- length(participants)
conditions <- levels(d$condition)
n_conditions <- length(conditions)
# no. parameters (a, v1, v2, z, t0)
n_pars <- length(init_params())
p <- vector("list", n_participants)
for (i in seq_along(participants)) {
estimates <- array(NA, c(n_conditions, n_pars))
colnames(estimates) <- c("a", "v", "z", "t0")
rownames(estimates) <- c("A", "B")
for (j in seq_along(conditions)) {
data <- filter(d, ID == i, condition == conditions[j])
fit <- nlminb(init_params(),
diffusionloglik,
lower = 0,
condition = data$condition,
rt = data$rt,
response = data$response)
estimates[j, ] <- fit$par |> round(3)
}
p[[i]] <- estimates
}
p
participant_params
library(tidyverse)
d <- read_csv("data/session-6.csv")
ll
library(tidyverse)
library(viridis)
xlim <- c(-4.5, 4.5)
alpha <- c(0.6, 0.2)
dprime <- 1
criterion <- -0.2
colors <- viridis(n = 4,
begin = 0,
end = 0.98,
direction = -1)
p1 <- tibble(x = seq(xlim[1], xlim[2], by = 0.1)) |>
ggplot(aes(x)) +
stat_function(fun = dnorm, colour = colors[1],
args = list(mean = -dprime/2, sd = 1),
size = 1.5) +
stat_function(fun = dnorm, colour = colors[4],
args = list(mean = dprime/2, sd = 1),
size = 1.5) +
geom_vline(xintercept = c(-dprime/2, dprime/2), size = 1, linetype = "dotted",
alpha =  0.4) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(labels = NULL) +
labs(x = "Familarity", y = "") +
annotate("text",
x = 0.1,
y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.03,
label = "d'",
size = 8) +
annotate("segment", x = -dprime/2,
xend = dprime/2,
y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.01,
yend = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.01,
size = 1) +
annotate("text",
x = -1.5,
y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.03,
label = "new",
size = 6,
color = "grey60") +
annotate("text",
x = 1.5,
y = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.03,
label = "old",
size = 6,
color = "grey60") +
theme_linedraw()
p1
p2 <- p1 +
geom_vline(xintercept = 0, size = 1,
alpha = 0.4,
linetype = "dashed") +
geom_area(stat = "function", fun = dnorm,
args = list(mean = -dprime/2, sd = 1),
fill = colors[1], alpha = 0.6,
xlim = c(criterion, xlim[2])) +
geom_area(stat = "function", fun = dnorm,
args = list(mean = dprime/2, sd = 1),
fill = colors[4], alpha = alpha[2],
xlim = c(criterion, xlim[2])) +
geom_vline(xintercept = criterion, size = 1,
linetype = 1) +
annotate("text",
x = -0.05,
y = -0.02,
label = "k",
size = 8)
p2
