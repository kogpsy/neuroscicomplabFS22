---
title: "Daten importieren"
description: Daten aus Verhaltensexperimenten importieren und bearbeiten.
date: "2022-03-08"
author:
  - name: Andrew Ellis
    url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0002-2788-936X
license: CC BY
citation: true
bibliography: ../../bibliography.bib
format:
    html:
        toc: true
        code-link: true
---

```{r}
#| include: false

# Set working directory of R
knitr::opts_knit$set(root.dir = '../../data/rdk_decision_experiment')
```

# RStudio Projekt 
Nun wollen wir die Datens√§tze aus dem Verhaltensexperiment von der letzten Sitzung in R importieren. 

Laden Sie das [RStudio Projekt](../../downloadable_files/import-data.zip) und √∂ffnen Sie es.
Im Projekt ist ein R Script File enthalten (`import-data.R`).

<aside>
Falls Sie nur den R Code m√∂chten, k√∂nnen Sie das File hier downloaden:
üëâ [R Code](../../downloadable_files/import-data.R)
</aside>

# Einen Datensatz bearbeiten
Es gibt zwei Unterordner: `testdata` und `data`. In ersterem befindet sich ein Datensatz einer Testperson, in letzterem befinden sich mehrere Datens√§tze. Wir importieren und bearbeiten zuerst den Datensatz aus dem `testdata` Ordner, und wenden anschliessend das Gelernte gleichzeitig auf mehrere Datens√§tze an.

```{r}
#| echo: true
#| message: false
#| warning: false

library(tidyverse)
```
 
<aside>
In Ihrem Rstudio Projekt ist dieses File im Ordner `testdata` gespeichert (Hier in einem Ordner names `data/rdktest`). Bitte passen Sie den Pfad dementsprechend an, oder verwenden Sie den Code aus dem R Script im RStudio Projekt.
</aside>

## CSV File importieren

```{r}
#| message: false
#| warning: false

testdata <- read_csv("testdata/ZZ_rdk-discrimination_2022_Mar_07_1403.csv") 
```

### Variablen √ºberpr√ºfen

```{r}
glimpse(testdata)
```

## Practice Trials l√∂schen

```{r}
#| message: false
#| warning: false

library(kableExtra)

testdata |> 
  slice_head(n = 12) |> 
  kbl() |> 
  kable_paper("striped", full_width = FALSE) |> 
  column_spec(2:7, bold = TRUE) |> 
  row_spec(1:6, bold = TRUE, color = "white", background = "#D7261E")
```

```{r}
testdata |> 
  slice_head(n = 12) |> 
  select(starts_with("main_block")) |> 
  kbl() |> 
  kable_paper("striped", full_width = FALSE) |> 
  row_spec(1:7, bold = TRUE, color = "white", background = "#D7261E")
```
Die Variable `main_blocks_loop.thisN` ist die Trialnummer. Diese k√∂nnen wir verwenden, um die Zeilen auszuschliessen, die nicht zum Main Block geh√∂ren.

```{r}
testdata |> 
    filter(!is.na(main_blocks_loop.thisN)) |>
    select(-contains("practice_block_loop"))
```

## Variablen ausw√§hlen

```{r}
testdata |>
    select(-contains("static"),
           -contains("fixation"),
           -contains("image"),
           -contains("instruction"),
           -contains("feedback"))
```

```{r}
testdata <- testdata |>
    select(-contains("static"),
           -contains("fixation"),
           -contains("image"),
           -contains("instruction"),
           -contains("feedback"))
```

```{r}
testdata
```

## Variablen umbennen

```{r}
testdata <- testdata |>
    select(trial = main_blocks_loop.thisN,
           ID = Pseudonym,
           cue,
           direction,
           response = dots_keyboard_response.keys,
           rt = dots_keyboard_response.rt)

```

```{r}
testdata
```

## Neue Variablen definieren

```{r}
testdata <- testdata |>
    mutate(choice = if_else(response == "j", "right", "left"),
           response = if_else(choice == "right", 1, 0))
```

Alternative:

```{r}
#| eval: false
testdata <- testdata |>
    mutate(choice = if_else(response == "j", "right", "left"),
           response = as.numeric(choice == "right"))
```

Wir erstellen ausserdem hier eine Variable, welche angibt, ob der Cue `valid`, `invalid` oder `neutral` war. Ein Cue ist genau dann valide, wenn er dieselbe Richtung hat wie der RDK Stimulus, d.h. `cue == direction`.

```{r}
testdata <- testdata |>
    mutate(condition = case_when(cue == "none" ~ "neutral",
                                 cue == direction ~ "valid",
                                 cue != direction ~ "invalid"))
```

```{r}
testdata <- testdata |>
    mutate(correct = as.numeric(choice == direction))
```

## Gruppierungsvariablen

```{r}
glimpse(testdata)
```

```{r}
testdata <- testdata |>
    mutate_if(is.character, as.factor)
```

```{r}
glimpse(testdata)
```

## Accuracy pro Bedingung

Wir k√∂nnen nun die _accuracy_ in jeder Cue-Bedingung berechnen. Es gibt hier zwei M√∂glichkeiten: wir berechen die Anzahl Trials (`N`), und die Anzahl korrekter Antworten (`ncorrect`) separat. Der Anteil korrekter Antworten ist dann einfach `ncorrect/N`. Dasselbe Ergebnis erhalten wir, wenn wir einfach den Mittelwert der korrekten Antworten nehmen.

```{r}
testaccuracy <- testdata |>
    group_by(condition) |>
    summarise(N = n(),
              ncorrect = sum(correct),
              accuracy = ncorrect/N,
              accuracy2 = mean(correct))

testaccuracy
```

# Mehrere Datens√§tze bearbeiten

Nun werden wir dasselbe wie oben machen, aber dieses Mal f√ºr alle `.csv` Files, die  in einem Ordner gespeichert sind. 

<aside>
In Ihrem Rstudio Projekt sind die Files im Ordner `data` gespeichert (Hier in einem Ordner names `data/rdkdata`). Bitte passen Sie den Pfad dementsprechend an, oder verwenden Sie das R Script im RStudio Projekt.
</aside>

## Funktion definieren

Nun wollen wir die ersten paar Schritte gleichzeitig auf mehrere Files anwenden:

1. `CSV` File einlesen
2. Filename hinzuf√ºgen
3. Practice Trials l√∂schen
4. Practice Variablen l√∂schen

Dieser Vorgang ist in R ziemlich elegant. Anstatt dass wir manuell √ºber alle Files iterieren m√ºssen, k√∂nnen wir eine Funktion definieren, die wir auf ein File anwenden k√∂nnen, und dann wenden wir diese Funktion auf alle Files an.

<aside>
Mit `map_*` Funktionen k√∂nnen wir eine Funktion auf alle Elemente einer Liste anwenden. `map_dfr` macht genau das, und gibt einen Dataframe als Output, in welchem die einzelnen Elemente _row-wise_ zusamengesetzt werden.
</aside>

Die Funktion, welche wir auf ein einzelnes `.csv` File anweden m√∂chten, ist diese:

```{r}
import_function <- function(filename) {
    read_csv(filename) |>
        mutate(filename = basename(filename)) |>
        filter(!is.na(main_blocks_loop.thisN)) |>
        select(-contains("practice_block_loop"))
}
```

<aside>
Probieren Sie die Funktion mit dem einzelnen `.csv` File von oben. 
</aside>

## Alle Files in einem Ordner auflisten

```{r}
datadir <- "data/"
list_of_files <- datadir |>
    list.files(pattern = "csv", recursive = TRUE, full.names = TRUE)
```

```{r}
list_of_files
```

## Funktion auf Liste anwenden

```{r}
#| message: false
#| warning: false
data <- list_of_files |> 
    map_dfr(~ import_function(.x))
```

## Variablen ausw√§hlen und umbennen

```{r}
data <- data |>
    select(-contains("static"),
           -contains("fixation"),
           -contains("image"),
           -contains("instruction"),
           -contains("feedback"))
```

```{r}
data <- data |>
    select(trial = main_blocks_loop.thisN,
           ID = Pseudonym,
           cue,
           direction,
           response = dots_keyboard_response.keys,
           rt = dots_keyboard_response.rt)

```

## Neue Variablen definieren

### Korrekte Antworten
```{r}
data <- data |>
    mutate(choice = if_else(response == "j", "right", "left"),
           response = if_else(choice == "right", 1, 0))

```

```{r}
data <- data |>
    mutate(correct = as.numeric(choice == direction))
```

```{r}
glimpse(data)
```

```{r}
data |> 
  slice_head(n = 20)
```

### Cue-Bedingungsvariable

```{r}
data <- data |>
    mutate(condition = case_when(cue == "none" ~ "neutral",
                                 cue == direction ~ "valid",
                                 cue != direction ~ "invalid"))
```

### Daten als CSV speichern

An dieser Stelle speichern wir den neu kreierten Datensatz als `.csv` File. Somit k√∂nnen wir die Daten einfach importieren, ohne die ganzen Schritte wiederholen zu m√ºssen.

```{r}
data |> write_csv(file = "data_clean/rdkdata.csv")
```

```{r}
data |> 
  slice_head(n = 20)
```

## Gruppierungsvariablen 

```{r}
data <- data |>
    mutate_if(is.character, as.factor)
```

```{r}
glimpse(data)
```

## Accuracy pro Person/Bedingung

Accuracy pro Person und pro Bedingung berechnen.

```{r}
accuracy <- data |>
    group_by(ID, condition) |>
    summarise(N = n(),
              ncorrect = sum(correct),
              accuracy = mean(correct))

```   

```{r}
accuracy
```

## Visualisieren

```{r fig.height=12, fig.width=15}
accuracy |> 
  ggplot(aes(x = condition, y = accuracy, fill = condition)) +
  geom_col() +
  scale_fill_manual(
    values = c(invalid = "#9E0142",
    neutral = "#C4C4B7",
    valid = "#2EC762")
  ) +
  labs(
    x = "Cue",
    y = "Proportion correct",
    title = "Accuracy per person/condition"
  ) +
  theme_linedraw(base_size = 28) +
  facet_wrap(~ID)
```