---
title: "Evidence Accumulation Models: II"
description: | 
    Fitting models to data
date: "2022-05-03"
author:
  - name: Andrew Ellis
    url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, UniversitÃ¤t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0002-2788-936X
license: CC BY
citation: true
bibliography: ../../bibliography.bib
format:
    html:
        toc: true
        code-link: true
        code-fold: false
        code-tools: true
---

<!-- :::{.callout-note} -->
<!-- ðŸ‘‰ [R Code fÃ¼r dieses Kapitel downloaden](../../downloadable_files/evidence-accumulation-1.R) -->
<!-- ::: -->



```{r}
#| label: load-packages
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(viridis)

```



## Fitting models to data: Paramter estimation

The goal of fitting a model to data is to find those best-fitting parameter values, i.e. we want to estimate parameters from the data. This is done by minimizing the error between the model's predictions and the data.

Here, we will look at maximum likelihood estimation (MLE). The main idea is that we try to find a set of parameters such that the probability of observing the (fixed) data.


The likelihood function is a function that represents how likely it is to obtain a certain set of observations from a given model. Weâ€™re considering the set of observations as fixed â€” theyâ€™ve happened, theyâ€™re in the past â€” and now weâ€™re considering under which set of model parameters we would be most likely to observe them.

## Generate some data with known parameters

Generate RTs from the diffusion model as data.



```{r}
library(rtdists)

drift <- 0.2
boundary <- 0.1
bias <- 0.5
ndt <- 0.05

genparms <- c(boundary, drift, bias*boundary, ndt)           
names(genparms) <- c("a", "v", "z", "t0") 

```



```{r}
rts <- rdiffusion(n = 500,
                  a=genparms["a"],
                  v=genparms["v"], 
                  t0=genparms["t0"], 
                  z=genparms["z"],
                  s=.1)  
```



## Define log likelihood function

This function returns the negative log probability of the data, given the parameters.

```{r}
diffusionloglik <- function(pars, rt, response) 
{
  likelihoods <- ddiffusion(rt, response=response,                 
                          a=pars["a"], 
                          v=pars["v"], 
                          t0=pars["t0"], 
                          z=pars["z"], 
                          s=.1,
                          precision=1)      
  return(-sum(log(likelihoods)))
}  
```



## Generate starting values for parameters

```{r}
init_parms <- c(runif(1, 0.01, 0.4), 
           runif(1, 0.01, 0.5),
           runif(1, 0, 0.1),
           runif(1, 0, 0.1))
names(init_parms) <- c("a", "v", "z", "t0") 

```


## Estimate parameters

```{r}
fit <- optim(init_parms, 
             diffusionloglik, 
             gr = NULL, 
             rt = rts$rt, 
             response = rts$response)
```


```{r}
fit
```


## Compare estimated parameters to true parameters

```{r}
round(fit$par, 3)
```


```{r}
genparms
```



## Example: full DDM



```{r}
diffusionloglik <- function(pars, rt, response) 
{
  likelihoods <- tryCatch(ddiffusion(rt, response=response,                 
                          a=pars["a"], 
                          v=pars["v"], 
                          t0=pars["t0"], 
                          z=0.5*pars["a"], 
                          sz=pars["sz"], 
                          st0=pars["st0"], 
                          sv=pars["sv"],s=.1,precision=1),
                        error = function(e) 0)  
  
  if (any(likelihoods==0)) return(1e6) 
  return(-sum(log(likelihoods)))
}  
```


```{r}
genparms <- c(.1,.2,.5,.05,.2,.05)           
names(genparms) <- c("a", "v", "t0", "sz", "st0", "sv") 
```

```{r}
rts <- rdiffusion(500, a=genparms["a"],
                       v=genparms["v"], 
                       t0=genparms["t0"], 
                       z=0.5*genparms["a"],
                       d=0, 
                       sz=genparms["sz"], 
                       sv=genparms["sv"],  
                       st0=genparms["st0"],
                       s=.1)   
```

```{r}
#generate starting values for parameters     
sparms <- c(runif(1, 0.01, 0.4), 
           runif(1, 0.01, 0.5),
           0.3, 
           runif(1, 0.02, 0.08),
           runif(1, .1, .3),
           runif(1, 0, 0.1))
names(sparms) <- c("a", "v", "t0", "sz", "st0", "sv") 
```


```{r}
#now estimate parameters
fit2 <- optim(sparms, diffusionloglik, gr = NULL, 
               rt=rts$rt, response=rts$response)
```

```{r}
round(fit2$par, 3)
```

```{r}
genparms
```




